# -*- coding: utf-8 -*-
"""Welcome to Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
from IPython import get_ipython
from IPython.display import display
# %%
import subprocess
import sys
import os
import random
import cv2
import numpy as np
from PIL import Image
from IPython.display import display, HTML
import shutil

# Install required packages
!wget -q https://huggingface.co/spaces/TheStinger/Ilaria_Upscaler/resolve/main/requirements.txt
!pip install -r /content/requirements.txt
!wget -q https://github.com/xinntao/RealESRGAN.git
!wget -q https://github.com/XPixelGroup/BasicSR.git

if not os.path.exists("/content/CodeFormer"):
    print("[*] Cloning CodeFormer...")
    !git clone -q https://github.com/sczhou/CodeFormer
# %cd /content/CodeFormer
!pip install -q -r requirements.txt
!python basicsr/setup.py develop
!wget -q https://github.com/sczhou/CodeFormer/releases/download/v0.1.0/codeformer.pth -P ./weights
# %cd /content/

# Import after installation
import gradio as gr
from basicsr.archs.rrdbnet_arch import RRDBNet
from basicsr.utils.download_util import load_file_from_url
from realesrgan import RealESRGANer
from realesrgan.archs.srvgg_arch import SRVGGNetCompact
from gfpgan import GFPGANer

# Set up paths and global variables
os.makedirs('weights', exist_ok=True)
last_file = None
img_mode = "RGBA"

def realesrgan(img, model_name, denoise_strength, face_enhance_method, outscale, codeformer_weight):
    """Real-ESRGAN function to restore (and upscale) images."""
    global last_file
    if img is None:
        return None, "No image provided", None # Return None for ImageSlider if no image

    # Define model parameters
    if model_name == 'RealESRGAN_x4plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
        netscale = 4
        file_url = ['https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth']
    elif model_name == 'RealESRNet_x4plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
        netscale = 4
        file_url = ['https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.1/RealESRNet_x4plus.pth']
    elif model_name == 'RealESRGAN_x4plus_anime_6B':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=6, num_grow_ch=32, scale=4)
        netscale = 4
        file_url = ['https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth']
    elif model_name == 'RealESRGAN_x2plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=2)
        netscale = 2
        file_url = ['https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.1/RealESRGAN_x2plus.pth']
    elif model_name == 'realesr-general-x4v3':
        model = SRVGGNetCompact(num_in_ch=3, num_out_ch=3, num_feat=64, num_conv=32, upscale=4, act_type='prelu')
        netscale = 4
        file_url = [
            'https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5.0/realesr-general-wdn-x4v3.pth',
            'https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5.0/realesr-general-x4v3.pth'
        ]

    model_path = os.path.join('weights', model_name + '.pth')
    if not os.path.isfile(model_path):
        for url in file_url:
            model_path = load_file_from_url(
                url=url, model_dir='weights', progress=True, file_name=None
            )
    dni_weight = None
    if model_name == 'realesr-general-x4v3' and denoise_strength != 1:
        wdn_model_path = model_path.replace('realesr-general-x4v3', 'realesr-general-wdn-x4v3')
        model_path = [model_path, wdn_model_path]
        dni_weight = [denoise_strength, 1 - denoise_strength]

    upsampler = RealESRGANer(
        scale=netscale,
        model_path=model_path,
        dni_weight=dni_weight,
        model=model,
        tile=400,  # Smaller tile for Colab memory
        tile_pad=10,
        pre_pad=0,
        half=True,  # Use half precision to save memory
        gpu_id=0
    )

    if face_enhance_method == "GFPAGANer":
        face_enhancer = GFPGANer(
            model_path='https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth',
            upscale=outscale,
            arch='clean',
            channel_multiplier=2,
            bg_upsampler=upsampler
        )
        # Convert PIL image to numpy array
        cv_img = np.array(img)
        if len(cv_img.shape) == 2:  # Grayscale
            cv_img = cv2.cvtColor(cv_img, cv2.COLOR_GRAY2RGB)
        elif cv_img.shape[2] == 4:  # RGBA
            cv_img = cv2.cvtColor(cv_img, cv2.COLOR_RGBA2BGRA)
        else:  # RGB
            cv_img = cv2.cvtColor(cv_img, cv2.COLOR_RGB2BGR)
        try:
            _, _, output = face_enhancer.enhance(cv_img, has_aligned=False, only_center_face=False, paste_back=True)
        except RuntimeError as error:
            print('Error', error)
            return None, f"Error: {str(error)}", None
    elif face_enhance_method == "CodeFormer":
        # Prepare input image for CodeFormer
        input_folder = "/content/CodeFormer/inputs/uploaded_image"
        output_folder = "/content/CodeFormer/outputs"
        os.makedirs(input_folder, exist_ok=True)
        os.makedirs(output_folder, exist_ok=True)
        temp_input_path = os.path.join(input_folder, "input.png")
        img.save(temp_input_path)
        try:
            subprocess.run(
                [
                    "python",
                    "/content/CodeFormer/inference_codeformer.py",
                    "-w", str(codeformer_weight),
                    "--input_path", input_folder,
                    "--output_path", output_folder,
                    "--face_upsample",
                    "--bg_upsampler", "realesrgan",
                    "--upscale", str(outscale)
                ],
                check=True
            )
        except subprocess.CalledProcessError as e:
            print(f"CodeFormer inference failed: {e}")
            if os.path.exists(temp_input_path):
                os.remove(temp_input_path)
            return None, f"CodeFormer inference failed: {e}", None
        output_subfolder = os.path.join(output_folder, "final_results")
        output_files = [f for f in os.listdir(output_subfolder) if f.endswith(('.png', '.jpg', '.jpeg'))]
        if not output_files:
            if os.path.exists(temp_input_path):
                os.remove(temp_input_path)
            return None, "CodeFormer output not found.", None
        output_path = os.path.join(output_subfolder, output_files[0])
        output = cv2.imread(output_path, cv2.IMREAD_UNCHANGED)
        if output is None:
            if os.path.exists(temp_input_path):
                os.remove(temp_input_path)
            return None, "Failed to read CodeFormer output image.", None
        if os.path.exists(temp_input_path):
            os.remove(temp_input_path)
    else:
        cv_img = np.array(img)
        if len(cv_img.shape) == 2:
            cv_img = cv2.cvtColor(cv_img, cv2.COLOR_GRAY2RGB)
        elif cv_img.shape[2] == 4:
            cv_img = cv2.cvtColor(cv_img, cv2.COLOR_RGBA2BGRA)
        else:
            cv_img = cv2.cvtColor(cv_img, cv2.COLOR_RGB2BGR)
        try:
            output, _ = upsampler.enhance(cv_img, outscale=outscale)
        except RuntimeError as error:
            print('Error', error)
            return None, f"Error: {str(error)}", None

    extension = 'png' if img_mode == 'RGBA' else 'jpg'
    out_filename = f"output_{random.randint(0, 1000000)}.{extension}"
    cv2.imwrite(out_filename, output)
    if last_file and os.path.exists(last_file):
        os.remove(last_file)
    last_file = out_filename

    if output.shape[2] == 4:
        output_rgb = cv2.cvtColor(output, cv2.COLOR_BGRA2RGBA)
    else:
        output_rgb = cv2.cvtColor(output, cv2.COLOR_BGR2RGB)

    input_filename = f"input_{random.randint(0, 1000000)}.{extension}"
    cv_img_input = np.array(img)
    if len(cv_img_input.shape) == 2:
        cv_img_input = cv2.cvtColor(cv_img_input, cv2.COLOR_GRAY2RGB)
    elif cv_img_input.shape[2] == 4:
        cv_img_input = cv2.cvtColor(cv_img_input, cv2.COLOR_RGBA2BGRA)
    else:
        cv_img_input = cv2.cvtColor(cv_img_input, cv2.COLOR_RGB2BGR)
    cv2.imwrite(input_filename, cv_img_input)

    return out_filename, image_properties(output_rgb), (input_filename, out_filename)

def image_properties(img):
    """Returns the dimensions and color mode of the image."""
    global img_mode
    if isinstance(img, np.ndarray):
        height, width = img.shape[:2]
        channels = img.shape[2] if len(img.shape) > 2 else 1
        if channels == 4:
            img_mode = "RGBA"
        elif channels == 3:
            img_mode = "RGB"
        else:
            img_mode = "Grayscale"
        return f"Resolution: {width}x{height} | Color Mode: {img_mode}"
    elif isinstance(img, str):
        with Image.open(img) as im:
            return f"Resolution: {im.width}x{im.height} | Color Mode: {im.mode}"
    return "Unsupported image format"

def reset():
    global last_file
    if last_file and os.path.exists(last_file):
        os.remove(last_file)
    last_file = None
    return None, None, None, None # Add None for ImageSlider

def main():
    with gr.Blocks(title="Upscaler") as app:
        gr.Markdown("""
# Upscaler
""")
        with gr.Accordion("Upscaling options"):
            with gr.Row():
                model_name = gr.Dropdown(
                    label="Model",
                    choices=[
                        "RealESRGAN_x4plus",
                        "RealESRNet_x4plus",
                        "RealESRGAN_x4plus_anime_6B",
                        "RealESRGAN_x2plus",
                        "realesr-general-x4v3"
                    ],
                    value="RealESRGAN_x4plus"
                )
                denoise_strength = gr.Slider(
                    label="Denoise Strength",
                    minimum=0, maximum=1, step=0.1, value=0.5
                )
                outscale = gr.Slider(
                    label="Resolution Upscale",
                    minimum=1, maximum=4, step=1, value=2
                )

            with gr.Row():
                face_enhance_method = gr.Dropdown(
                    label="Face Enhancement Method",
                    choices=["None", "GFPAGANer", "CodeFormer"],
                    value="None"
                )
                codeformer_weight = gr.Slider(
                    label="CodeFormer Weight (for face enhancement)",
                    minimum=0, maximum=1, step=0.05, value=0.4, visible=False
                )

                face_enhance_method.change(
                    lambda value: gr.update(visible=value == "CodeFormer"),
                    inputs=face_enhance_method,
                    outputs=codeformer_weight
                )

            with gr.Row():
                with gr.Column():
                    input_image = gr.Image(label="Input Image", type="pil")
                    input_properties = gr.Textbox(label="Input Image Properties", interactive=False)
                with gr.Column():
                    output_image = gr.Image(label="Output Image")
                    output_properties = gr.Textbox(label="Output Image Properties", interactive=False)

            image_comparison = gr.ImageSlider(label="Comparison", render=True) # Render ImageSlider by default

            with gr.Row():
                reset_btn = gr.Button("Reset")
                upscale_btn = gr.Button("Upscale", variant="primary")

            input_image.change(image_properties, inputs=input_image, outputs=input_properties)

            upscale_btn.click(
                realesrgan,
                inputs=[input_image, model_name, denoise_strength, face_enhance_method, outscale, codeformer_weight],
                outputs=[output_image, output_properties, image_comparison]
            )

            reset_btn.click(
                reset,
                inputs=[],
                outputs=[input_image, output_image, input_properties, image_comparison]
            )
        gr.Markdown("usingESRGAN](https://github.com/xinntao/Real-ESRGAN) | Using [CodeFormer](https://github.com/sczhou/CodeFormer)")
        app.launch(debug=True, share=True)

if __name__ == "__main__":
    print("Setup complete! Starting the app...")
    main()